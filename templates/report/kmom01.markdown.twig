kmom01
-------------------------
<h3>Mina förkunskaper och tidigare erfarenheter kring objektorientering</h3>
Det var på kursen oopython som jag lärde mig om objektorientering för första gången. 
I början känndes det som att jag skrev koden på ett komplicerat sätt men så småningom kom jag att förstå objektorientering är som jag skapar "blåkopia av bilen". Därefter kan man använda det för att tillverka instanser till exempel Toyoya och Volvo bilar.

{# 
最初のうちは、わざわざ複雑にコードを書いているように思えたが、だんだんと「車の設計図」を作って、
その後にそれを使ってトヨタやvolvoの車を作れることがわかってきた。
JavaScriptコースでもobject orientedを勉強したが、やはり難しいという印象はある。 #}

<h3>PHPs modell för klasser och objekt</h3>
I PHP skapas en objekt urifrån en klass och en klass är en samling av variabler och metoder som behövs gemensamt.
Genom "extends" kan man skapa en ny klass via arv. Om man titta på report-uppgiften jag skapar en ny klass som heter "ReportController" genom ärver klassen "AbstractController" i filen ReportController.php.

<h3>Om uppgiften report</h3>
Jag har skapat kodbas och strukturen genom att följa föreläsningen. 
Kodstrukturen är i grunden baserad på MVC och vyer beskrivs i filer i templates mappen och controller beskrivs i ReportController-filen i src-mappen.
För design använde jag SASS. Det gick inte bra att kompilera det till css-fil med npm som vi gjorde i design-kursen, så jag installerade och använde vscodes tillägg, Live Sass Compiler.
Min TIL med uppgiften var att jag kunde förstå djupare om MVC kodstrukturen som verkade vara mycket mer komplicerad förut vid tidigare kurser. Dessutom kunde jag komma igång med objektorienterad PHP såsom användning av "extends".

<h3>Om artikeln "PHP The Right Way"</h3>
Jag tycker att det var intressant att läsa om "Dependency Management". Jag brukade använde composer utan känna till det väl men förstår jag nu bättre om dess roll som beroendehanteraren.
Dessutom var kapitlet om mallar också bra för att organisera min förståelse. Genom användning av vyer i mvc kan man skriva lättläst kod begränsad till innehållsvisning.

{# これまでよくわからないままなんとなく使っていたcomposerについて、composer.jsonファイルを通じて指定したコマンドを実行することで、プロジェクトの依存関係を管理していることが、わかるようになった。
他には、テンプレートについての章も理解を整理するのに良かった。MVCにおいて、viewを使うことで、コンテンツ表示に限定し、読みやすいコードを書くことができる。
また、データベースについても、セキュリティ的に危険な例などが挙げられていた、興味深かった。 #}
